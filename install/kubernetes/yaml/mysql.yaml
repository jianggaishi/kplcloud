apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: kpaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      volumes:
        - name: mysql-conf
          configMap:
            name: mysql-conf
            defaultMode: 420
      containers:
        - name: mysql
          image: 'mysql:5.7.14'
          ports:
            - name: tcp-3306
              containerPort: 3306
              protocol: TCP
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_ROOT_PASSWORD
              value: admin@dudulu91
          resources:
            limits:
              memory: 512Mi
            requests:
              memory: 128Mi
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: mysql-conf
              readOnly: true
              mountPath: /etc/mysql/conf.d/mysqld.cnf
              subPath: mysqld.cnf
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      hostname: mysql
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: mysql-data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: nfs-storage
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: mysql
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: kpaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis
    spec:
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
            defaultMode: 420
      containers:
        - name: redis
          image: 'redis:latest'
          command:
            - redis-server
          args:
            - /etc/redis/redis.conf
          ports:
            - name: tcp-6379
              containerPort: 6379
              protocol: TCP
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              readOnly: true
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      hostname: redis
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: redis-data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: nfs-storage
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: redis
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: kpaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: 'rabbitmq:3.6.14-management-alpine'
          ports:
            - name: epmd-4369
              containerPort: 4369
              protocol: TCP
            - name: amqp-5672
              containerPort: 5672
              protocol: TCP
            - name: rabbitmq-dist
              containerPort: 25672
              protocol: TCP
            - name: http-15672
              containerPort: 15672
              protocol: TCP
          env:
            - name: RABBITMQ_ERLANG_COOKIE
              value: fT4FYaFYZydoxHWmf7d1SluTCJMxdKf+Icn/ehaOANU=
            - name: RABBITMQ_DEFAULT_USER
              value: kplcloud
            - name: RABBITMQ_DEFAULT_PASS
              value: kplcloud
          resources:
            limits:
              memory: 512Mi
            requests:
              memory: 128Mi
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - '-c'
                  - >
                    if [ -z "$(grep rabbitmq /etc/resolv.conf)" ]; then
                      sed "s/^search \([^ ]\+\)/search rabbitmq.\1 \1/" /etc/resolv.conf > /etc/resolv.conf.new;
                      cat /etc/resolv.conf.new > /etc/resolv.conf;
                      rm /etc/resolv.conf.new;
                    fi; until rabbitmqctl node_health_check; do sleep 1; done;
                    if [[ "$HOSTNAME" != "rabbitmq-0" && -z "$(rabbitmqctl
                    cluster_status | grep rabbitmq-0)" ]]; then
                      rabbitmqctl stop_app;
                      rabbitmqctl join_cluster rabbit@rabbitmq-0;
                      rabbitmqctl start_app;
                    fi; rabbitmqctl set_policy ha-all "."
                    '{"ha-mode":"exactly","ha-params":3,"ha-sync-mode":"automatic"}'
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      hostname: rabbitmq
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: rabbitmq-data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 512Mi
        storageClassName: nfs-storage
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: rabbitmq
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
